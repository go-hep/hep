// Copyright 2018 The go-hep Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Command brio-gen generates (un)marshaler code for types.
package main

import (
	"bytes"
	"testing"
)

func TestGenerate(t *testing.T) {
	buf := new(bytes.Buffer)
	err := generate(buf, "image", []string{"Point"})
	if err != nil {
		t.Fatal(err)
	}

	got := string(buf.Bytes())
	if got != want {
		t.Fatalf("generated code error.\ngot = %q\nwant= %q\n", got, want)
	}
}

const want = `// DO NOT EDIT; automatically generated by brio-gen

package image

import (
	"encoding/binary"
)

// MarshalBinary implements encoding.BinaryMarshaler
func (o *Point) MarshalBinary() (data []byte, err error) {
	var buf [8]byte
	binary.LittleEndian.PutUint64(buf[:8], uint64(o.X))
	data = append(data, buf[:8]...)
	binary.LittleEndian.PutUint64(buf[:8], uint64(o.Y))
	data = append(data, buf[:8]...)
	return data, err
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (o *Point) UnmarshalBinary(data []byte) (err error) {
	o.X = int(binary.LittleEndian.Uint64(data[:8]))
	data = data[8:]
	o.Y = int(binary.LittleEndian.Uint64(data[:8]))
	data = data[8:]
	return err
}
`
