// Copyright 2017 The go-hep Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package lhef_test

import (
	"fmt"
	"io/ioutil"
	"os"
	"testing"

	"go-hep.org/x/hep/lhef"
)

const w_debug = false

func TestLhefWriting(t *testing.T) {
	f, err := ioutil.TempFile("", "lhef-write-")
	if err != nil {
		t.Error(err)
	}
	defer func() {
		f.Close()
		os.Remove(f.Name())
	}()

	enc, err := lhef.NewEncoder(f)
	if err != nil {
		t.Error(err)
	}
	defer enc.Close()

	enc.Run = lhef.HEPRUP{
		IDBMUP: [2]int64{2212, -2212},
		EBMUP:  [2]float64{9.800000E+02, 9.800000E+02},
		PDFGUP: [2]int32{0, 0},
		PDFSUP: [2]int32{7, 7},
		IDWTUP: 3,
		NPRUP:  2,
		XSECUP: []float64{5.220106E+00, 2.602564E-01},
		XERRUP: []float64{5.384128E-01, 1.062492E-01},
		XMAXUP: []float64{1, 1},
		LPRUP:  []int32{81, 82},
	}

	evts := []lhef.HEPEUP{
		{
			NUP:    12,
			IDPRUP: 81,
			XWGTUP: 1.000000E+00,
			XPDWUP: [2]float64{0., 0.},
			SCALUP: 1.733125E+02,
			AQEDUP: 7.819848E-03,
			AQCDUP: 1.156692E-01,
			IDUP:   []int64{2, -2, 6, -6, 24, 5, -24, -5, -1, 2, 13, -14},
			ISTUP:  []int32{-1, -1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1},
			MOTHUP: [][2]int32{
				{0, 0}, {0, 0}, {1, 2}, {1, 2},
				{3, 0}, {3, 0}, {4, 0}, {4, 0},
				{5, 0}, {5, 0}, {7, 0}, {7, 0},
			},
			ICOLUP: [][2]int32{
				{101, 0}, {0, 102}, {101, 0}, {0, 102},
				{0, 0}, {101, 0}, {0, 0}, {0, 102},
				{0, 103}, {103, 0}, {0, 0}, {0, 0},
			},
			PUP: [][5]float64{
				{0.0000000000E+00, 0.0000000000E+00, 1.0838163607E+02, 1.0838163607E+02, 0.0000000000E+00},
				{0.0000000000E+00, 0.0000000000E+00, -2.7976111253E+02, 2.7976111253E+02, 0.0000000000E+00},
				{3.3629095553E+01, 8.9115695965E+00, -1.1059648961E+02, 2.1241781824E+02, 1.7798711709E+02},
				{-3.3629095553E+01, -8.9115695965E+00, -6.0782986840E+01, 1.7572493036E+02, 1.6116559038E+02},
				{-3.0884654830E+01, -1.2140252163E+01, -4.7852784957E+00, 8.6623320800E+01, 7.9871479200E+01},
				{6.4513750383E+01, 2.1051821759E+01, -1.0581121112E+02, 1.2579449744E+02, 4.8000000000E+00},
				{-5.0940382043E+01, 3.4880802250E+01, -7.5291578188E+01, 1.2621743906E+02, 8.0314552164E+01},
				{1.7311286490E+01, -4.3792371846E+01, 1.4508591348E+01, 4.9507491299E+01, 4.8000000000E+00},
				{1.8584463332E+01, 9.1657242037E+00, 1.8652036768E+01, 2.7881896512E+01, 3.3000000000E-01},
				{-4.9469118162E+01, -2.1305976366E+01, -2.3437315264E+01, 5.8741424288E+01, 3.3000000000E-01},
				{9.6912588119E+00, 3.9074488577E+01, -2.5560060185E+01, 4.7687147069E+01, 1.0566000000E-01},
				{-6.0631640855E+01, -4.1936863270E+00, -4.9731518002E+01, 7.8530291993E+01, 0.0000000000E+00},
			},
			VTIMUP: []float64{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
			SPINUP: []float64{9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9.},
		},
		{
			NUP:    12,
			IDPRUP: 81,
			XWGTUP: 1.000000E+00,
			XPDWUP: [2]float64{0., 0.},
			SCALUP: 2.453729E+02,
			AQEDUP: 7.850576E-03,
			AQCDUP: 1.102586E-01,
			IDUP:   []int64{2, -2, 6, -6, 24, 5, -24, -5, -3, 4, 15, -16},
			ISTUP:  []int32{-1, -1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1},
			MOTHUP: [][2]int32{
				{0, 0}, {0, 0}, {1, 2}, {1, 2},
				{3, 0}, {3, 0}, {4, 0}, {4, 0},
				{5, 0}, {5, 0}, {7, 0}, {7, 0},
			},
			ICOLUP: [][2]int32{
				{101, 0}, {0, 102}, {101, 0}, {0, 102},
				{0, 0}, {101, 0}, {0, 0}, {0, 102},
				{0, 103}, {103, 0}, {0, 0}, {0, 0},
			},
			PUP: [][5]float64{
				{0.0000000000E+00, 0.0000000000E+00, 1.4168500180E+02, 1.4168500180E+02, 0.0000000000E+00},
				{0.0000000000E+00, 0.0000000000E+00, -5.1193431229E+02, 5.1193431229E+02, 0.0000000000E+00},
				{1.4483021237E+02, -9.1836222700E+01, -3.2020944169E+02, 4.0376632938E+02, 1.7630507646E+02},
				{-1.4483021237E+02, 9.1836222700E+01, -5.0039868808E+01, 2.4985298471E+02, 1.7467925831E+02},
				{6.6573250937E+01, -1.0557760324E+02, -2.7628620725E+02, 3.1285280962E+02, 7.7228130408E+01},
				{7.8256961429E+01, 1.3741380542E+01, -4.3923234434E+01, 9.0913519757E+01, 4.8000000000E+00},
				{-5.2331928485E+01, 1.3655957736E+01, 3.5832022017E+01, 1.0130969814E+02, 7.7811343743E+01},
				{-9.2498283882E+01, 7.8180264964E+01, -8.5871890826E+01, 1.4854328657E+02, 4.8000000000E+00},
				{1.3698476364E+01, -8.8968981168E+01, -1.5010039084E+02, 1.7502429887E+02, 5.0000000000E-01},
				{5.2874774574E+01, -1.6608622073E+01, -1.2618581641E+02, 1.3782851075E+02, 1.5000000000E+00},
				{-5.3810426731E+01, -1.6793177176E+00, -8.3584775043E+00, 5.4510586203E+01, 1.7770000000E+00},
				{1.4784982465E+00, 1.5335275454E+01, 4.4190499522E+01, 4.6799111939E+01, 0.0000000000E+00},
			},
			VTIMUP: []float64{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
			SPINUP: []float64{9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9., 9.},
		},
	}
	for i, evt := range evts {
		err = enc.Encode(&evt)
		if err != nil {
			t.Error(err)
		}
		if w_debug {
			fmt.Printf("===[%d]===\nevt: %v\n", i, evt)
		}
	}

	if w_debug {
		defer func() {
			enc.Close()
			ww, _ := ioutil.ReadFile(f.Name())
			fmt.Printf("===>\n%v<===\n", string(ww))
		}()
	}
}
